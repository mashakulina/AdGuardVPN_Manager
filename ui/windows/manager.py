import tkinter as tk
from tkinter import ttk, scrolledtext, PhotoImage
import subprocess
import threading
import time
import webbrowser
import sys
import re
from datetime import datetime, date
from ui.windows.locations import LocationSelectionWindow
from ui.windows.settings import SettingsWindow
from ui.windows.updates import UpdateWindow
from core.uninstall import UninstallWindow
from ui.components.common import create_tooltip
from core.auth import ManagerAuthWindow
from core.utils import clean_ansi_codes, clean_location_output, check_if_connected
import os
from ui.components.dialogs import show_message_dialog, show_question_dialog
from ui.components.button_styler import create_hover_button, create_hover_button_for_manager
from ui.windows.license import LicenseWindow
from ui.windows.info_dialog import show_info_dialog
from ui.windows.donat import DonationWindow
_last_available_site = None
_last_check_time = 0

def get_available_site():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–∞–π—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç"""
    global _last_available_site, _last_check_time

    import time
    current_time = time.time()

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if _last_available_site and (current_time - _last_check_time) < 300:
        return _last_available_site

    sites = [
        "https://adguard-vpn.com",
        "https://adguard-vpn.work",
        "https://adguardvpn-help.net"
    ]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    for site in sites:
        if check_site_availability_improved(site):
            _last_available_site = site
            _last_check_time = current_time
            return site

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Å–∞–π—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
    _last_available_site = sites[0]
    _last_check_time = current_time
    return sites[0]

def check_site_availability_improved(url):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞"""
    try:
        import socket
        import ssl
        from urllib.parse import urlparse

        parsed = urlparse(url)
        domain = parsed.netloc
        port = 443  # HTTPS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –°–æ–∑–¥–∞–µ–º socket —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(3.0)  # 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç

        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        sock.connect((domain, port))

        # –î–ª—è HTTPS —Å–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE

        ssl_sock = context.wrap_socket(sock, server_hostname=domain)
        ssl_sock.close()

        return True

    except (socket.timeout, ConnectionRefusedError, ssl.SSLError, OSError):
        return False
    except Exception:
        return False

class AdGuardVPNManager:
    def __init__(self, root):
        self.root = root
        self.setup_window_properties()
        self.root.title("AdGuard VPN Manager")
        self.window_height_hidden = 210  # –í—ã—Å–æ—Ç–∞ –∫–æ–≥–¥–∞ –ª–æ–≥ —Å–∫—Ä—ã—Ç
        self.window_height_visible = 355  # –í—ã—Å–æ—Ç–∞ –∫–æ–≥–¥–∞ –ª–æ–≥ –ø–æ–∫–∞–∑–∞–Ω
        self.window_width = 570
        self.root.geometry(f"{self.window_width}x{self.window_height_hidden}")
        self.root.configure(bg='#182030')


        try:
            from tkinter import ttk
            style = ttk.Style()
            style.theme_use('clam')  # –∏–ª–∏ 'alt', 'classic' - –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–º—ã
        except:
            pass

        self.sudo_password = None
        self.current_location = ""
        self.is_connected = False

        self.is_logged_in = False
        self.check_initial_login_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
        self.account_menu_open = False
        self.settings_menu_open = False

        # Bind —Å–æ–±—ã—Ç–∏–π —Ñ–æ–∫—É—Å
        self.root.bind("<FocusIn>", self.on_focus_in)
        self.root.bind("<FocusOut>", self.on_focus_out)

        self.setup_gui()
        self.update_status()
        self.update_ui_for_auth_status()
        self.schedule_status_update()
        self.hide_log()
        self.log_visible = False

    def setup_window_properties(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –æ–∫–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.root.title("AdGuard VPN Manager")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WM_CLASS (–ë–ï–ó –ü–†–û–ë–ï–õ–û–í!)
        try:
            self.root.wm_class("AdGuardVPNManager")
        except:
            pass

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
        try:
            manager_dir = os.path.expanduser("~/AdGuard VPN Manager")
            icon_path = os.path.join(manager_dir, "ico/adguard.png")
            if os.path.exists(icon_path):
                # –î–ª—è PNG —Ñ–∞–π–ª–æ–≤ –≤ tkinter
                icon = tk.PhotoImage(file=icon_path)
                self.root.iconphoto(True, icon)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

    def on_focus_in(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–æ–º"""
        pass  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    def on_focus_out(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ—Ä—é —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–æ–º - –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é"""
        self.close_all_menus()

    def check_initial_login_status(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'list-locations'],
                capture_output=True,
                text=True,
                timeout=5
            )
            self.is_logged_in = (result.returncode == 0)
        except:
            self.is_logged_in = False

    def setup_gui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg='#182030')
        main_container.pack(fill=tk.BOTH, expand=True)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º
        header_frame = tk.Frame(main_container, bg='#182030', height=100)
        header_frame.pack(fill=tk.X, padx=20, pady=10)
        header_frame.pack_propagate(False)

        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –ª–æ–≥–æ—Ç–∏–ø + –∏–∫–æ–Ω–∫–∏
        top_row_frame = tk.Frame(header_frame, bg='#182030')
        top_row_frame.pack(fill=tk.X, pady=(5, 0))

        left_icons_frame = tk.Frame(top_row_frame, bg='#182030')
        left_icons_frame.pack(side=tk.LEFT, fill=tk.Y)

        # –ò–∫–æ–Ω–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        self.account_icon = tk.Label(left_icons_frame, text="üë§", font=("Arial", 16),
                                fg='#0a84ff', bg='#182030', cursor="hand2")
        self.account_icon.pack(side=tk.LEFT, padx=(0, 15))
        self.account_icon.bind("<Enter>", lambda e: self.account_icon.config(fg='#30d158'))
        self.account_icon.bind("<Leave>", lambda e: self.account_icon.config(fg='#0a84ff'))
        self.account_icon.bind("<Button-1>", self.toggle_account_menu)
        create_tooltip(self.account_icon, "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")

        # Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä—è–¥–æ–º —Å –∏–∫–æ–Ω–∫–æ–π)
        self.email_label = tk.Label(left_icons_frame, text="",
                            font=("Arial", 11), fg='#8e8e93', bg='#182030', justify='left')
        self.email_label.pack(side=tk.LEFT, padx=(0, 15))

        self.update_email_display()

        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        logo_container = tk.Frame(header_frame, bg='#182030')
        logo_container.pack(expand=True, fill=tk.BOTH)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É—é—â–∏–π —Ñ—Ä–µ–π–º
        center_frame = tk.Frame(logo_container, bg='#182030')
        center_frame.pack(expand=True)

        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            manager_dir = os.path.expanduser("~/AdGuard VPN Manager")
            logo_path = os.path.join(manager_dir, "ico/logo.png")
            self.logo_image = tk.PhotoImage(file=logo_path)
            logo_icon = tk.Label(center_frame, image=self.logo_image, bg='#182030')
            logo_icon.pack(side=tk.LEFT, padx=(0, 10))

        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø: {e}")
            logo_icon = tk.Label(center_frame, text="üõ°Ô∏è", font=("Arial", 24),
                            fg='white', bg='#182030')
            logo_icon.pack(side=tk.LEFT, padx=(0, 10))

        title_label = tk.Label(center_frame, text="AdGuard VPN",
                            font=("Arial", 24, "bold"),
                            fg='white', bg='#182030')
        title_label.pack(side=tk.LEFT)

        # –ò–∫–æ–Ω–∫–∏ —Å–ø—Ä–∞–≤–∞
        icons_frame = tk.Frame(top_row_frame, bg='#182030')
        icons_frame.pack(side=tk.RIGHT, fill=tk.Y)

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.status_label = tk.Label(icons_frame, text="üî¥", font=("Arial", 12),
                                    fg='#ff3b30', bg='#182030')
        self.status_label.pack(side=tk.LEFT, padx=(0, 15))
        self.status_label.bind("<Enter>", lambda e: self.status_label.config(fg='#30d158'))
        self.status_label.bind("<Leave>", lambda e: self.status_label.config(fg='#0a84ff'))
        create_tooltip(self.status_label, "–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN")

        # –ò–∫–æ–Ω–∫–∞ –≥–ª–∞–∑–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ –ª–æ–≥–∞
        self.eye_icon = tk.Label(icons_frame, text="üìù", font=("Arial", 14),
                                    fg='#0a84ff', bg='#182030', cursor="hand2")
        self.eye_icon.pack(side=tk.LEFT, padx=(0, 15))
        self.eye_icon.bind("<Enter>", lambda e: self.eye_icon.config(fg='#30d158'))
        self.eye_icon.bind("<Leave>", lambda e: self.eye_icon.config(fg='#0a84ff'))
        self.eye_icon.bind("<Button-1>", self.toggle_log_visibility)
        create_tooltip(self.eye_icon, "–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ª–æ–≥")

        # –ò–∫–æ–Ω–∫–∞ —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∏ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        self.settings_icon = tk.Label(icons_frame, text="‚öôÔ∏è", font=("Arial", 22),
                                    fg='#0a84ff', bg='#182030', cursor="hand2")
        self.settings_icon.pack(side=tk.LEFT, padx=(0, 15))
        self.settings_icon.bind("<Enter>", lambda e: self.settings_icon.config(fg='#30d158'))
        self.settings_icon.bind("<Leave>", lambda e: self.settings_icon.config(fg='#0a84ff'))
        self.settings_icon.bind("<Button-1>", self.toggle_settings_menu)
        create_tooltip(self.settings_icon, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –ò–∫–æ–Ω–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.info_icon = tk.Label(icons_frame, text="üõàÔ∏é", font=("Arial", 16),
                                fg='#0a84ff', bg='#182030', cursor="hand2")
        self.info_icon.pack(side=tk.LEFT, padx=(0, 15))
        self.info_icon.bind("<Enter>", lambda e: self.info_icon.config(fg='#30d158'))
        self.info_icon.bind("<Leave>", lambda e: self.info_icon.config(fg='#0a84ff'))
        self.info_icon.bind("<Button-1>", lambda e: show_info_dialog(self.root))

        # –ò–∫–æ–Ω–∫–∞ –¥–æ–Ω–∞—Ç–∞
        self.donate_icon = tk.Label(icons_frame, text="üí∏", font=("Arial", 14),
                                fg='#ffcc00', bg='#182030', cursor="hand2")
        self.donate_icon.pack(side=tk.LEFT)
        self.donate_icon.bind("<Enter>", lambda e: self.donate_icon.config(fg='#ffdd44'))
        self.donate_icon.bind("<Leave>", lambda e: self.donate_icon.config(fg='#ffcc00'))
        self.donate_icon.bind("<Button-1>", self.open_donate_link)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        create_tooltip(self.settings_icon, "–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        create_tooltip(self.info_icon, "–û—Ç–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–∫—É AdGuard VPN")
        create_tooltip(self.donate_icon, "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É")

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_frame = tk.Frame(main_container, bg='#182030')
        content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(content_frame, bg='#182030')
        btn_frame.pack(fill=tk.X, pady=10)

        self.connect_button = tk.Button(btn_frame, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
                                        command=self.connect_vpn, font=('Arial', 11), bg='#5BA06A', fg='white', bd=0, padx=12, pady=12, width=17, anchor='center',
                                        highlightthickness=0, cursor='hand2',
                                        activebackground='#5BA06A', activeforeground='white', takefocus=0)
        self.connect_button.grid(row=0, column=1, padx=(0, 10))


        location_button = create_hover_button_for_manager(btn_frame, "–í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é", self.select_location)
        location_button.grid(row=0, column=2)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–µ—Å—å —Ñ—Ä–µ–π–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        btn_frame.grid_columnconfigure(0, weight=1)
        btn_frame.grid_columnconfigure(1, weight=1)
        btn_frame.grid_columnconfigure(2, weight=1)
        btn_frame.grid_columnconfigure(3, weight=1)

        # –§—Ä–µ–π–º –¥–ª—è –ª–æ–≥–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç)
        self.log_frame = tk.Frame(content_frame, bg='#182030', height=140)
        self.log_frame.pack(fill=tk.X, pady=(0, 0), expand=False)
        self.log_frame.pack_propagate(False)

        tk.Label(self.log_frame, text="–õ–æ–≥–∏:",
                font=("Arial", 11), fg='white', bg='#182030').pack(anchor=tk.W, pady=(0, 5))

        self.log_text = tk.Text(self.log_frame, bg='#15354D', highlightthickness=0, wrap=tk.WORD,
                            fg='#00ff00', font=("Courier", 9))
        self.log_text.pack(fill=tk.BOTH, expand=True)
        self.log_text.config(state=tk.DISABLED)

    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.log_text.config(state=tk.DISABLED)

    def toggle_log_visibility(self, event=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ª–æ–≥–∞"""
        if self.log_visible:
            self.hide_log()
        else:
            self.show_log()

    def show_log(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥"""
        self.log_frame.pack(fill=tk.X, pady=(0, 5))
        self.eye_icon.config(text="üö´")
        self.log_visible = True
        create_tooltip(self.eye_icon, "–°–∫—Ä—ã—Ç—å –ª–æ–≥")
        self.log_text.see(tk.END)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞
        self.root.geometry(f"{self.window_width}x{self.window_height_visible}")

    def hide_log(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –ª–æ–≥"""
        self.log_frame.pack_forget()
        self.eye_icon.config(text="üìù")
        self.log_visible = False
        create_tooltip(self.eye_icon, "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥")

        # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞
        self.root.geometry(f"{self.window_width}x{self.window_height_hidden}")

    def update_login_button(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞"""
        pass

    def toggle_account_menu(self, event=None):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç/–∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        if self.account_menu_open:
            self.close_account_menu()
        else:
            self.open_account_menu()

    def open_account_menu(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        if self.account_menu_open:
            return

        if hasattr(self, 'settings_menu_open') and self.settings_menu_open:
            self.close_settings_menu()

        self.account_menu_open = True

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
        menu_x = self.account_icon.winfo_rootx()
        menu_y = self.account_icon.winfo_rooty() + self.account_icon.winfo_height()

        self.account_menu = tk.Toplevel(self.root)
        self.account_menu.wm_overrideredirect(True)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        license_type = self.get_license_type() if self.is_logged_in else "Free"

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –º–µ–Ω—é
        if self.is_logged_in:
            # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ + –∏–Ω—Ñ–æ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ + –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å + –≤—ã—Ö–æ–¥
            menu_height = 165
        else:
            # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥
            menu_height = 40

        self.account_menu.geometry(f"165x{menu_height}+{menu_x}+{menu_y}")
        self.account_menu.configure(bg='#15354D', relief=tk.RAISED, bd=1)

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        menu_button_style = {
            'font': ('Arial', 11),
            'bg': '#15354D',
            'fg': 'white',
            'bd': 0,
            'relief': tk.FLAT,
            'padx': 12,
            'pady': 10,
            'anchor': tk.W,
            'width': 15,
            'highlightthickness':0,
            'cursor': 'hand2'
        }

        # –°—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        text_style = {
            'font': ('Arial', 10),
            'bg': '#15354D',
            'fg': '#8e8e93',
            'bd': 0,
            'padx': 12,
            'pady': 5,
            'anchor': tk.W
        }

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        if self.is_logged_in:
            license_text = f"–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏: {license_type}"

            license_label = tk.Label(self.account_menu, text=license_text, **text_style)
            license_label.pack(fill=tk.X)

            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            separator = tk.Frame(self.account_menu, height=1, bg='#1e4a6a')
            separator.pack(fill=tk.X, padx=5, pady=2)

            # –ö–Ω–æ–ø–∫–∞ "–ò–Ω—Ñ–æ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"
            license_info_button = create_hover_button_for_manager(self.account_menu, text="–ò–Ω—Ñ–æ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏",
                                        command=self.check_license, **menu_button_style)
            license_info_button.pack(fill=tk.X)

            # Bind —Å–æ–±—ã—Ç–∏–π –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞
            license_info_button.bind("<Enter>", lambda e: license_info_button.config(bg='#1e4a6a'))
            license_info_button.bind("<Leave>", lambda e: license_info_button.config(bg='#15354D'))

            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            separator = tk.Frame(self.account_menu, height=1, bg='#1e4a6a')
            separator.pack(fill=tk.X, padx=5, pady=2)

            # –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é" –∏–ª–∏ "–ü—Ä–æ–¥–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if license_type == "Free":
                renew_button_text = "–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é"
            else:
                renew_button_text = "–ü—Ä–æ–¥–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é"

            renew_button = create_hover_button_for_manager(self.account_menu, text=renew_button_text,
                                command=self.renew_license, **menu_button_style)
            renew_button.pack(fill=tk.X)

            # Bind —Å–æ–±—ã—Ç–∏–π –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞
            renew_button.bind("<Enter>", lambda e: renew_button.config(bg='#1e4a6a'))
            renew_button.bind("<Leave>", lambda e: renew_button.config(bg='#15354D'))

            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞
            separator2 = tk.Frame(self.account_menu, height=1, bg='#1e4a6a')
            separator2.pack(fill=tk.X, padx=5, pady=2)

        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
        auth_text = "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞" if self.is_logged_in else "–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç"
        self.menu_auth_button = create_hover_button_for_manager(self.account_menu, text=auth_text,
                                        command=self.handle_menu_auth, **menu_button_style)
        self.menu_auth_button.pack(fill=tk.X)

        # Bind —Å–æ–±—ã—Ç–∏–π –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞
        self.menu_auth_button.bind("<Enter>", lambda e: self.menu_auth_button.config(bg='#1e4a6a'))
        self.menu_auth_button.bind("<Leave>", lambda e: self.menu_auth_button.config(bg='#15354D'))

        # Bind —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–µ–Ω—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        self.account_menu.bind("<FocusOut>", lambda e: self.close_account_menu())
        self.root.bind("<Button-1>", self.check_close_account_menu)

    def close_account_menu(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        if hasattr(self, 'account_menu') and self.account_menu:
            try:
                self.account_menu.destroy()
            except:
                pass  # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–∂–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ
        self.account_menu_open = False
        try:
            self.root.unbind("<Button-1>")
        except:
            pass

    def check_close_account_menu(self, event):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏"""
        if (hasattr(self, 'account_menu') and self.account_menu and
            self.account_menu.winfo_exists()):

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –Ω–∞ —Å–∞–º–æ–º –º–µ–Ω—é –∏–ª–∏ –∏–∫–æ–Ω–∫–µ
            menu_widget = event.widget
            while menu_widget:
                if menu_widget == self.account_menu:
                    return  # –ö–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é - –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º
                menu_widget = menu_widget.master

            # –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –≤ –º–µ–Ω—é –∏ –Ω–µ –Ω–∞ –∏–∫–æ–Ω–∫–µ - –∑–∞–∫—Ä—ã–≤–∞–µ–º
            if (event.widget != self.account_icon and
                not self.is_event_in_widget(event, self.account_icon)):
                self.close_account_menu()

    def is_event_in_widget(self, event, widget):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–∞"""
        try:
            x, y, width, height = (widget.winfo_rootx(), widget.winfo_rooty(),
                                widget.winfo_width(), widget.winfo_height())
            return (x <= event.x_root <= x + width and
                y <= event.y_root <= y + height)
        except:
            return False

    def handle_menu_auth(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é/–≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é"""
        self.close_account_menu()
        if self.is_logged_in:
            self.logout()
        else:
            thread = threading.Thread(target=self._login_thread)
            thread.daemon = True
            thread.start()

    def renew_license(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        self.close_account_menu()
        license_type = self.get_license_type() if self.is_logged_in else "Free"

        if license_type == "Free":
            action_text = "–ø–æ–∫—É–ø–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏"
        else:
            action_text = "–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"

        available_site = get_available_site()
        webbrowser.open(available_site)
        self.log_message(f"üîó –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {action_text}")

    def toggle_settings_menu(self, event=None):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç/–∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if hasattr(self, 'settings_menu_open') and self.settings_menu_open:
            self.close_settings_menu()
        else:
            self.open_settings_menu()

    def open_settings_menu(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if hasattr(self, 'settings_menu_open') and self.settings_menu_open:
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –º–µ–Ω—é –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
        if self.account_menu_open:
            self.close_account_menu()

        self.settings_menu_open = True

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
        menu_x = self.settings_icon.winfo_rootx()
        menu_y = self.settings_icon.winfo_rooty() + self.settings_icon.winfo_height()

        self.settings_menu = tk.Toplevel(self.root)
        self.settings_menu.wm_overrideredirect(True)
        self.settings_menu.geometry(f"180x135+{menu_x}+{menu_y}")
        self.settings_menu.configure(bg='#15354D', relief=tk.RAISED, bd=1)

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        menu_button_style = {
            'font': ('Arial', 11),
            'bg': '#15354D',
            'fg': 'white',
            'bd': 0,
            'relief': tk.FLAT,
            'padx': 12,
            'pady': 10,
            'anchor': tk.W,
            'width': 15,
            'highlightthickness':0,
            'cursor': 'hand2'
        }

        # –ö–Ω–æ–ø–∫–∞ "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        settings_button = create_hover_button_for_manager(self.settings_menu, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                                command=self.handle_settings, **menu_button_style)
        settings_button.pack(fill=tk.X)
        settings_button.bind("<Enter>", lambda e: settings_button.config(bg='#1e4a6a'))
        settings_button.bind("<Leave>", lambda e: settings_button.config(bg='#15354D'))

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = tk.Frame(self.settings_menu, height=1, bg='#1e4a6a')
        separator.pack(fill=tk.X, padx=5, pady=2)

        # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
        update_button = create_hover_button_for_manager(self.settings_menu, text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                                command=self.handle_update, **menu_button_style)
        update_button.pack(fill=tk.X)
        update_button.bind("<Enter>", lambda e: update_button.config(bg='#1e4a6a'))
        update_button.bind("<Leave>", lambda e: update_button.config(bg='#15354D'))

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = tk.Frame(self.settings_menu, height=1, bg='#1e4a6a')
        separator.pack(fill=tk.X, padx=5, pady=2)

        # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å AdGuard VPN"
        uninstall_button = create_hover_button_for_manager(self.settings_menu, text="–£–¥–∞–ª–∏—Ç—å AdGuard VPN",
                                command=self.handle_uninstall, **menu_button_style)
        uninstall_button.pack(fill=tk.X)
        uninstall_button.bind("<Enter>", lambda e: uninstall_button.config(bg='#1e4a6a'))
        uninstall_button.bind("<Leave>", lambda e: uninstall_button.config(bg='#15354D'))

        # Bind —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–µ–Ω—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        self.settings_menu.bind("<FocusOut>", lambda e: self.close_settings_menu())
        self.root.bind("<Button-1>", self.check_close_settings_menu)

    def close_settings_menu(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if hasattr(self, 'settings_menu') and self.settings_menu:
            try:
                self.settings_menu.destroy()
            except:
                pass  # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–∂–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ
        self.settings_menu_open = False
        try:
            self.root.unbind("<Button-1>")
        except:
            pass

    def check_close_settings_menu(self, event):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏"""
        if (hasattr(self, 'settings_menu') and self.settings_menu and
            self.settings_menu.winfo_exists()):

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –Ω–∞ —Å–∞–º–æ–º –º–µ–Ω—é –∏–ª–∏ –∏–∫–æ–Ω–∫–µ
            menu_widget = event.widget
            while menu_widget:
                if menu_widget == self.settings_menu:
                    return  # –ö–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é - –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º
                menu_widget = menu_widget.master

            # –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –≤ –º–µ–Ω—é –∏ –Ω–µ –Ω–∞ –∏–∫–æ–Ω–∫–µ - –∑–∞–∫—Ä—ã–≤–∞–µ–º
            if (event.widget != self.settings_icon and
                not self.is_event_in_widget(event, self.settings_icon)):
                self.close_settings_menu()

    def close_all_menus(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é"""
        if self.account_menu_open:
            self.close_account_menu()
        if hasattr(self, 'settings_menu_open') and self.settings_menu_open:
            self.close_settings_menu()

    def handle_settings(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.close_settings_menu()
        self.open_settings()

    def handle_update(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        self.close_settings_menu()
        self.check_update()

    def handle_uninstall(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –£–¥–∞–ª–∏—Ç—å AdGuard VPN"""
        self.close_settings_menu()
        self.uninstall()

    def open_info_link(self, event=None):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø—Ä–∞–≤–∫—É AdGuard VPN"""
        webbrowser.open("https://adguard-vpn.com/kb/ru/")
        self.log_message("üõàÔ∏é –û—Ç–∫—Ä—ã—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞ AdGuard VPN")

    def open_donate_link(self, event=None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –¥–æ–Ω–∞—Ç–∞"""
        donation_window = DonationWindow(self.root)
        donation_window.run()

    def open_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_window = SettingsWindow(self.root)
        settings_window.run()

    def update_status(self):
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'status'],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                ansi_escape = re.compile(r'\x1B\[[0-9;]*m')
                clean_text = ansi_escape.sub('', result.stdout)

                is_connected = check_if_connected(clean_text)

                if is_connected:
                    location = clean_location_output(clean_text)
                    if location:
                        self.current_location = location
                        self.status_label.config(text="üü¢")
                        self.connect_button.config(text="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", bg='#ff3b30',
                                                activebackground='#ff3b30')  # –¢–æ—Ç –∂–µ —Ü–≤–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                        self.is_connected = True
                    else:
                        self.current_location = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
                        self.status_label.config(text="üü¢")
                        self.connect_button.config(text="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", bg='#ff3b30',
                                                activebackground='#ff3b30')  # –¢–æ—Ç –∂–µ —Ü–≤–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                        self.is_connected = True
                else:
                    self.current_location = ""
                    self.status_label.config(text="üî¥")
                    self.connect_button.config(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", bg='#5BA06A',
                                            activebackground='#5BA06A')  # –¢–æ—Ç –∂–µ —Ü–≤–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                    self.is_connected = False
            else:
                self.current_location = ""
                self.status_label.config(text="üî¥")
                self.connect_button.config(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", bg='#5BA06A',
                                        activebackground='#5BA06A')  # –¢–æ—Ç –∂–µ —Ü–≤–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                self.is_connected = False
        except Exception as e:
            self.current_location = ""
            self.status_label.config(text="üî¥")
            self.connect_button.config(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", bg='#15354D',
                                    activebackground='#15354D')  # –¢–æ—Ç –∂–µ —Ü–≤–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
            self.is_connected = False

    def get_user_email(self):
        """–ü–æ–ª—É—á–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'license'],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                return self.parse_user_email(result.stdout)
            return None
        except:
            return None

    def parse_user_email(self, license_text):
        """–ü–∞—Ä—Å–∏—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—ã–≤–æ–¥–∞ adguardvpn-cli license"""
        try:
            # –û—á–∏—â–∞–µ–º ANSI –∫–æ–¥—ã
            ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
            clean_text = ansi_escape.sub('', license_text)

            lines = clean_text.split('\n')

            for line in lines:
                line_clean = line.strip()

                # –ò—â–µ–º email –≤ —Å—Ç—Ä–æ–∫–µ "Logged in as"
                if "Logged in as" in line_clean:
                    email_match = re.search(r'Logged in as (.+)$', line_clean)
                    if email_match:
                        email = email_match.group(1).strip()
                        # –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                        email = email.replace('(', '').replace(')', '')
                        return email

            return None

        except Exception as e:
            return None

    def update_email_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        if self.is_logged_in:
            email = self.get_user_email()
            license_type = self.get_license_type()

            if email:
                # –°–æ–∫—Ä–∞—â–∞–µ–º email –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if len(email) > 20:
                    display_email = email[:15] + "..."
                else:
                    display_email = email

                # –î–ª—è Free –≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫
                if license_type == "Free":
                    traffic = self.get_traffic_left()
                    if traffic:
                        display_text = f"{display_email} ({traffic})"
                    else:
                        display_text = display_email

                # –î–ª—è Premium –≤–µ—Ä—Å–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                elif license_type in ["Premium"]:
                    expiry_date = self.get_license_expiry()
                    if expiry_date:
                        days_left = self.get_days_until_expiry(expiry_date)
                        if days_left is not None:
                            if days_left == 0:
                                display_text = f"{display_email}\n(–õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è)"
                            elif days_left == 1:
                                display_text = f"{display_email}\n(–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ—Å—Ç–∞–ª—Å—è 1 –¥–µ–Ω—å)"
                            else:
                                days_text = self.get_days_text(days_left)
                                display_text = f"{display_email}\n(–õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} {days_text})"
                        else:
                            display_text = f"{display_email}\n(–õ–∏—Ü–µ–Ω–∑–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expiry_date})"
                    else:
                        display_text = display_email

                else:
                    display_text = display_email

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ü–≤–µ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.email_label.config(text=display_text, fg='#5BA06A')
            else:
                self.email_label.config(text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", fg='#5BA06A')
        else:
            # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.email_label.config(text="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", fg='#8e8e93')

    def get_traffic_left(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç—Ä–∞—Ñ–∏–∫ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'license'],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                return self.parse_traffic_left(result.stdout)
            return None
        except:
            return None

    def parse_traffic_left(self, license_text):
        """–ü–∞—Ä—Å–∏—Ç –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç—Ä–∞—Ñ–∏–∫ –∏–∑ –≤—ã–≤–æ–¥–∞ adguardvpn-cli license"""
        try:
            # –û—á–∏—â–∞–µ–º ANSI –∫–æ–¥—ã
            ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
            clean_text = ansi_escape.sub('', license_text)

            lines = clean_text.split('\n')

            for line in lines:
                line_clean = line.strip()

                # –ò—â–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç—Ä–∞—Ñ–∏–∫ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                if "GB left" in line_clean or "MB left" in line_clean:
                    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "You have X.XX GB left" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã—Ö
                    traffic_match = re.search(r'(\d+\.?\d*)\s*(GB|MB)\s*left', line_clean, re.IGNORECASE)
                    if traffic_match:
                        amount = traffic_match.group(1)
                        unit = traffic_match.group(2)
                        return f"{amount} {unit}"

                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                if "left" in line_clean.lower():
                    traffic_match = re.search(r'(\d+\.?\d*)\s*(GB|MB)', line_clean, re.IGNORECASE)
                    if traffic_match:
                        amount = traffic_match.group(1)
                        unit = traffic_match.group(2)
                        return f"{amount} {unit}"

            return None

        except Exception as e:
            return None

    def get_license_type(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'license'],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                license_type = self.parse_license_type(result.stdout)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è - —ç—Ç–æ –Ω–µ Free
                expiry_date = self.parse_license_expiry(result.stdout)
                if expiry_date and license_type == "Free":
                    return "Premium"

                return license_type
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def parse_license_type(self, license_text):
        """–ü–∞—Ä—Å–∏—Ç —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏–∑ –≤—ã–≤–æ–¥–∞ adguardvpn-cli license"""
        try:
            # –û—á–∏—â–∞–µ–º ANSI –∫–æ–¥—ã
            ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
            clean_text = ansi_escape.sub('', license_text)

            lines = clean_text.split('\n')

            for line in lines:
                line_clean = line.strip()

                # –ò—â–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏
                if "FREE version" in line_clean:
                    return "Free"
                elif "PREMIUM" in line_clean.upper():
                    return "Premium"

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º Free
            return "Free"

        except Exception as e:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def parse_license_info(self, license_text):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏–∑ –≤—ã–≤–æ–¥–∞ adguardvpn-cli license"""
        try:
            # –û—á–∏—â–∞–µ–º ANSI –∫–æ–¥—ã
            ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
            clean_text = ansi_escape.sub('', license_text)

            lines = clean_text.split('\n')
            license_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            devices = ""
            traffic_left = ""
            email = ""

            for line in lines:
                line_clean = line.strip()

                # –ò—â–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏
                if "FREE version" in line_clean:
                    license_type = "Free"
                elif "PREMIUM" in line_clean.upper():
                    license_type = "Premium"

                # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
                if "devices simultaneously" in line_clean:
                    devices_match = re.search(r'Up to (\d+) devices', line_clean)
                    if devices_match:
                        devices = f", {devices_match.group(1)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤"

                # –ò—â–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç—Ä–∞—Ñ–∏–∫
                if "GB left" in line_clean or "MB left" in line_clean:
                    traffic_match = re.search(r'(\d+\.?\d*)\s*(GB|MB)\s*left', line_clean)
                    if traffic_match:
                        traffic_left = f", {traffic_match.group(1)} {traffic_match.group(2)}"

                # –ò—â–µ–º email
                if "Logged in as" in line_clean:
                    email_match = re.search(r'Logged in as (.+)$', line_clean)
                    if email_match:
                        email = email_match.group(1)
                        # –°–æ–∫—Ä–∞—â–∞–µ–º email –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if len(email) > 20:
                            email = email[:15] + "..."
                        email = f" ({email})"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            if license_type != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                return f"–õ–∏—Ü–µ–Ω–∑–∏—è: {license_type}{devices}{traffic_left}{email}"
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–∞, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
                if devices or traffic_left:
                    return f"–õ–∏—Ü–µ–Ω–∑–∏—è: Free{devices}{traffic_left}{email}"
                else:
                    return "–õ–∏—Ü–µ–Ω–∑–∏—è: Free"

        except Exception as e:
            return "–õ–∏—Ü–µ–Ω–∑–∏—è: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"


    def get_license_expiry(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'license'],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                return self.parse_license_expiry(result.stdout)
            return None
        except:
            return None

    def parse_license_expiry(self, license_text):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏–∑ –≤—ã–≤–æ–¥–∞ adguardvpn-cli license"""
        try:
            # –û—á–∏—â–∞–µ–º ANSI –∫–æ–¥—ã
            ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
            clean_text = ansi_escape.sub('', license_text)

            lines = clean_text.split('\n')

            for line in lines:
                line_clean = line.strip()

                # –ò—â–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                if "subscription will be renewed on" in line_clean:
                    date_match = re.search(r'(\d{4}-\d{2}-\d{2})', line_clean)
                    if date_match:
                        return date_match.group(1)

                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                elif "expires on" in line_clean.lower():
                    date_match = re.search(r'(\d{4}-\d{2}-\d{2})', line_clean)
                    if date_match:
                        return date_match.group(1)

                elif "valid until" in line_clean.lower():
                    date_match = re.search(r'(\d{4}-\d{2}-\d{2})', line_clean)
                    if date_match:
                        return date_match.group(1)

            return None

        except Exception as e:
            return None

    def get_days_text(self, days):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '–¥–µ–Ω—å' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞"""
        if days % 10 == 1 and days % 100 != 11:
            return "–¥–µ–Ω—å"
        elif days % 10 in [2, 3, 4] and days % 100 not in [12, 13, 14]:
            return "–¥–Ω—è"
        else:
            return "–¥–Ω–µ–π"

    def get_days_until_expiry(self, expiry_date_str):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            from datetime import datetime, date

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            expiry_date = datetime.strptime(expiry_date_str, '%Y-%m-%d').date()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            current_date = date.today()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
            days_left = (expiry_date - current_date).days + 1

            return max(0, days_left)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –µ—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞

        except Exception as e:
            return None

    def update_ui_for_auth_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if self.is_logged_in:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
            self.connect_button.config(state=tk.NORMAL, bg='#15354D')
            # –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é" (–≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤ left_panel)
            for widget in self.connect_button.master.winfo_children():
                if isinstance(widget, tk.Button) and widget.cget('text') == "–í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é":
                    widget.config(state=tk.NORMAL, bg='#15354D')
                    break
        else:
            # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
            self.connect_button.config(state=tk.DISABLED, bg='#2a4d6a')
            # –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é"
            for widget in self.connect_button.master.winfo_children():
                if isinstance(widget, tk.Button) and widget.cget('text') == "–í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é":
                    widget.config(state=tk.DISABLED, bg='#2a4d6a')
                    break

    def schedule_status_update(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        self.update_status()

        # –û–±–Ω–æ–≤–ª—è–µ–º email –∏ —Ç—Ä–∞—Ñ–∏–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        static_info_counter = getattr(self, '_static_info_counter', 0) + 1
        self._static_info_counter = static_info_counter

        if static_info_counter >= 10:  # 30 —Å–µ–∫—É–Ω–¥ (10 * 3 —Å–µ–∫—É–Ω–¥—ã)
            self.update_email_display()  # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏ email –∏ —Ç—Ä–∞—Ñ–∏–∫
            self._static_info_counter = 0

        self.root.after(3000, self.schedule_status_update)

    def check_connection_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω"""
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'status'],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                status_text = result.stdout.strip()
                connected = check_if_connected(status_text)

                if connected:
                    location = clean_location_output(status_text)
                    if location:
                        self.current_location = location
                    else:
                        detailed_location = self.get_current_location()
                        if detailed_location:
                            self.current_location = detailed_location
                        else:
                            self.current_location = "üü¢"
                    return True
                else:
                    self.current_location = ""
                    return False

            result = subprocess.run(
                ['adguardvpn-cli', 'list-locations'],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                current_location = self.get_current_location()
                if current_location:
                    self.current_location = current_location
                else:
                    self.current_location = "üü¢"
                return True

            return False

        except Exception as e:
            self.current_location = ""
            return False

    def get_current_location(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'status', '--verbose'],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                output = result.stdout
                location_patterns = [
                    r'Location:\s*(.+)',
                    r'Server:\s*(.+)',
                    r'Endpoint:\s*(.+)',
                    r'Connected to:\s*(.+)'
                ]

                for pattern in location_patterns:
                    match = re.search(pattern, output, re.IGNORECASE)
                    if match:
                        location = match.group(1).strip()
                        return location

            result = subprocess.run(
                ['adguardvpn-cli', 'status'],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                text = result.stdout
                if 'connected to' in text.lower():
                    parts = text.split()
                    for i, part in enumerate(parts):
                        if part.lower() == 'connected' and i + 2 < len(parts) and parts[i + 1].lower() == 'to':
                            location = parts[i + 2]
                            return location

            return None

        except Exception as e:
            return None

    def connect_vpn(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ VPN —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω—é—é –∫–æ–Ω—Å–æ–ª—å"""
        if self.is_connected:
            self.disconnect_vpn()
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã GUI –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è
        thread = threading.Thread(target=self._connect_vpn_thread)
        thread.daemon = True
        thread.start()

    def _connect_vpn_thread(self):
        self.log_message("üîó –ó–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ...")
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (konsole –¥–ª—è KDE)
            command = 'konsole -e bash -c "(echo y; echo y; echo y) | adguardvpn-cli connect && echo –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, —Ç–µ—Ä–º–∏–Ω–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è! && sleep 1 || echo –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è && sleep 2"'

            process = subprocess.Popen(
                command,
                shell=True
            )

            time.sleep(10)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            max_attempts = 5
            for attempt in range(max_attempts):
                self.log_message(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è... ({attempt + 1}/{max_attempts})")

                if self.check_connection_status():
                    current_location = self.get_current_location()
                    location_text = f" –∫ {current_location}" if current_location else ""
                    self.log_message(f"‚úÖ VPN —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
                    return

                time.sleep(3)
                self.update_status()

            self.log_message("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª - –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è")

        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    def select_location(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω—é—é –∫–æ–Ω—Å–æ–ª—å"""
        location_window = LocationSelectionWindow(self.root)
        selected_location = location_window.run()

        if not selected_location:
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._select_location_thread, args=(selected_location,))
        thread.daemon = True
        thread.start()

    def _select_location_thread(self, selected_location):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        try:
            self.log_message(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {selected_location} —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
            command = f'konsole -e bash -c "(echo y; echo y; echo y) | adguardvpn-cli connect -l \\"{selected_location}\\" && echo –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, —Ç–µ—Ä–º–∏–Ω–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è! && sleep 3 || echo –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è && sleep 5"'

            process = subprocess.Popen(
                command,
                shell=True
            )

            time.sleep(10)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            max_attempts = 5
            connected = False

            for attempt in range(max_attempts):
                self.update_status()
                if self.check_connection_status():
                    connected = True
                    break
                time.sleep(3)

            if connected:
                current_location = self.get_current_location()
                display_location = current_location if current_location else selected_location
                self.log_message(f"‚úÖ VPN —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            else:
                time.sleep(2)
                self.update_status()

        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")

    def check_update(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        update_window = UpdateWindow(self.root)
        update_window.run()

    def check_license(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        self.close_account_menu()
        license_window = LicenseWindow(self.root)
        license_window.run()

    def disconnect_vpn(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç VPN"""
        try:
            self.log_message("üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ VPN...")

            # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ - –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
            result = subprocess.run(
                ['adguardvpn-cli', 'disconnect'],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                self.log_message("‚úÖ VPN –æ—Ç–∫–ª—é—á–µ–Ω")
                self.update_status()
            else:
                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å VPN")

        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if show_question_dialog(self.root, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?"):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=self._logout_thread)
            thread.daemon = True
            thread.start()

    def _logout_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            self.log_message("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...")

            # –û—Ç–∫–ª—é—á–∞–µ–º VPN –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            if self.is_connected:
                self.disconnect_vpn()
                time.sleep(2)

            # –í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            result = subprocess.run(
                ['adguardvpn-cli', 'logout'],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                self.root.after(0, self._logout_success)
            else:
                self.root.after(0, self._logout_failed)

        except Exception as e:
            self.root.after(0, lambda: self._logout_error(str(e)))

    def _logout_success(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç GUI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
        self.is_logged_in = False
        self.update_email_display()
        self.update_ui_for_auth_status()
        self.log_message("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.current_location = ""
        self.status_label.config(text="üî¥", fg='#ff3b30')
        self.connect_button.config(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", bg='#2a4d6a', state=tk.DISABLED)

    def _logout_failed(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç GUI –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
        self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")

    def _logout_error(self, error_msg):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç GUI –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã—Ö–æ–¥–∞"""
        self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {error_msg}")

    def toggle_auth(self):
        """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if self.is_logged_in:
            self.logout()
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=self._login_thread)
            thread.daemon = True
            thread.start()

    def _login_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–µ
            auth_window = ManagerAuthWindow(self.root)
            auth_success = auth_window.run()

            if auth_success:
                # –û–±–Ω–æ–≤–ª—è–µ–º GUI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.root.after(0, self._login_success)
            else:
                self.root.after(0, self._login_failed)

        except Exception as e:
            self.root.after(0, lambda: self._login_error(str(e)))

    def _login_success(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç GUI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.is_logged_in = True
        self.update_email_display()
        self.update_ui_for_auth_status()
        self.log_message("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç")

    def _login_failed(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç GUI –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.log_message("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

    def _login_error(self, error_msg):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç GUI –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_msg}")

    def uninstall(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ AdGuard VPN"""
        uninstall_window = UninstallWindow(self.root)
        uninstall_window.run()

    def close_app(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.close_all_menus()
        sys.exit()

    def run(self):
        self.root.mainloop()
