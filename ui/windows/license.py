import tkinter as tk
import subprocess
import re
from datetime import datetime
from ui.components.dialogs import show_message_dialog

class LicenseWindow:
    def __init__(self, parent):
        self.parent = parent

    def clean_license_output(self, text):
        """–£–¥–∞–ª—è–µ—Ç escape-—Å–∏–º–≤–æ–ª—ã –∏–∑ –≤—ã–≤–æ–¥–∞"""
        ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
        cleaned = ansi_escape.sub('', text)
        return cleaned.strip()

    def parse_license_info(self, text):
        """–ü–∞—Ä—Å–∏—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        cleaned = self.clean_license_output(text)
        lines = cleaned.split('\n')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        email = None
        license_type = "Free"
        devices = "2"
        traffic_left = None
        expiry_date = None

        for line in lines:
            line = line.strip()

            # Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if "Logged in as" in line:
                email_match = re.search(r'Logged in as (.+)$', line)
                if email_match:
                    email = email_match.group(1).strip()

            # –¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏
            if "FREE version" in line:
                license_type = "Free"
            elif "PREMIUM" in line.upper():
                license_type = "Premium"

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if "devices simultaneously" in line:
                devices_match = re.search(r'Up to (\d+) devices', line)
                if devices_match:
                    devices = devices_match.group(1)

            # –û—Å—Ç–∞–≤—à–∏–π—Å—è —Ç—Ä–∞—Ñ–∏–∫
            if "GB left" in line or "MB left" in line:
                traffic_match = re.search(r'You have (\d+\.?\d*)\s*(GB|MB) left', line)
                if traffic_match:
                    amount = traffic_match.group(1)
                    unit = traffic_match.group(2)
                    traffic_left = f"{amount} {unit}"

            # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if "renewed on" in line or "expires on" in line:
                date_match = re.search(r'(\d{4}-\d{2}-\d{2})', line)
                if date_match:
                    expiry_date = date_match.group(1)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
        if license_type == "Premium":
            return self.format_premium_info(email, devices, expiry_date)
        else:
            return self.format_free_info(email, devices, traffic_left)

    def format_free_info(self, email, devices, traffic_left):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è Free –≤–µ—Ä—Å–∏–∏"""
        info_lines = [
            "üé´ –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –í–ï–†–°–ò–Ø",
            "",
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email}" if email else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ù–µ —É–∫–∞–∑–∞–Ω",
            f"üì± –î–æ {devices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
            ""
        ]

        if traffic_left:
            info_lines.append(f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_left}")
        else:
            info_lines.append("üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: 3 –ì–ë –≤ –º–µ—Å—è—Ü")

        return '\n'.join(info_lines)

    def format_premium_info(self, email, devices, expiry_date):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è Premium –≤–µ—Ä—Å–∏–∏"""
        info_lines = [
            "üåü –ü–†–ï–ú–ò–£–ú –í–ï–†–°–ò–Ø",
            "",
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email}" if email else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ù–µ —É–∫–∞–∑–∞–Ω",
            f"üì± –î–æ {devices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
            ""
        ]

        if expiry_date:
            days_left = self.get_days_until_expiry(expiry_date)
            try:
                if days_left > 0:
                    info_lines.append(f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expiry_date}")
                    info_lines.append(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
                else:
                    info_lines.append(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞: {expiry_date}")
            except:
                info_lines.append(f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiry_date}")
        else:
            info_lines.append("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")

        return '\n'.join(info_lines)

    def get_days_until_expiry(self, expiry_date_str):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            from datetime import datetime, date

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            expiry_date = datetime.strptime(expiry_date_str, '%Y-%m-%d').date()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            current_date = date.today()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
            days_left = (expiry_date - current_date).days + 1

            return max(0, days_left)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –µ—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞

        except Exception as e:
            return None

    def get_license_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'license'],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                return self.parse_license_info(result.stdout)
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏\n\n" \
                       "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" \
                       "‚Ä¢ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n" \
                       "‚Ä¢ AdGuard VPN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n" \
                       "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"

        except subprocess.TimeoutExpired:
            return "‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏\n\n" \
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n" \
                   "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ AdGuard VPN."

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        license_info = self.get_license_info()
        show_message_dialog(self.parent, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏", license_info, "info")
