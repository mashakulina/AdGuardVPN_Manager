import tkinter as tk
from tkinter import messagebox
import subprocess
import threading
import re
import os
import time
import webbrowser
import sys
from ui.components.button_styler import create_hover_button, apply_hover_effect

class SudoAuthWindow:
    """–û–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ sudo"""
    def __init__(self):
        self.root = tk.Tk()
        self.setup_window_properties()
        self.root.title("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        self.root.geometry("260x290")
        self.root.configure(bg='#182030')

        try:
            from tkinter import ttk
            style = ttk.Style()
            style.theme_use('clam')  # –∏–ª–∏ 'alt', 'classic' - –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–º—ã
        except:
            pass

        self.sudo_password = None
        self.auth_success = False
        self.setup_ui()

    def setup_window_properties(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –æ–∫–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.root.title("AdGuard VPN Manager")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WM_CLASS (–ë–ï–ó –ü–†–û–ë–ï–õ–û–í!)
        try:
            self.root.wm_class("AdGuardVPNManager")
        except:
            pass

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
        try:
            manager_dir = os.path.expanduser("~/AdGuard VPN Manager")
            icon_path = os.path.join(manager_dir, "ico/adguard.png")
            if os.path.exists(icon_path):
                # –î–ª—è PNG —Ñ–∞–π–ª–æ–≤ –≤ tkinter
                icon = tk.PhotoImage(file=icon_path)
                self.root.iconphoto(True, icon)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

    def setup_ui(self):
        main_frame = tk.Frame(self.root, bg='#182030', padx=20, pady=15)
        main_frame.pack(fill=tk.BOTH, expand=True)

        title_label = tk.Label(main_frame, text="–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                              font=("Arial", 16, "bold"), fg='white', bg='#182030')
        title_label.pack(pady=10)

        desc_label = tk.Label(main_frame,
                             text="–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ AdGuard VPN\n—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                             font=("Arial", 10), fg='white', bg='#182030')
        desc_label.pack(pady=5)

        sudo_frame = tk.Frame(main_frame, bg='#182030')
        sudo_frame.pack(fill=tk.X, pady=10)

        tk.Label(sudo_frame, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                fg='white', bg='#182030').pack(anchor=tk.W)

        self.sudo_entry = tk.Entry(sudo_frame, show="*", width=40, font=('Arial', 12),
                                  bg='#15354D', fg='white', insertbackground='white')
        self.sudo_entry.pack(fill=tk.X, pady=5)
        self.sudo_entry.bind('<Return>', self.verify_sudo)
        self.sudo_entry.focus()

        btn_frame = tk.Frame(main_frame, bg='#182030')
        btn_frame.pack(fill=tk.X, pady=5)

        button_style = {
            'font': ('Arial', 10),
            'bg': '#15354D',
            'fg': 'white',
            'bd': 0,
            'padx': 10,
            'pady': 5,
            'width': 15,
            'highlightthickness':0,
            'cursor': 'hand2'
        }

        continue_btn = create_hover_button(btn_frame, text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                                           command=self.verify_sudo, **button_style)
        continue_btn.grid(row=0, column=0, padx=(0, 10))

        cancel_btn = create_hover_button(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                                         command=self.cancel, **button_style)
        cancel_btn.grid(row=0, column=1)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–µ—Å—å —Ñ—Ä–µ–π–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        btn_frame.grid_columnconfigure(0, weight=1)
        btn_frame.grid_columnconfigure(1, weight=1)

        self.status_var = tk.StringVar(value="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        status_bar = tk.Label(main_frame, textvariable=self.status_var,
                             relief=tk.SUNKEN, anchor=tk.W, bg='#15354D', fg='white')
        status_bar.pack(fill=tk.X, side=tk.BOTTOM, pady=(10, 0))

    def verify_sudo(self, event=None):
        password = self.sudo_entry.get()
        if not password:
            self.status_var.set("‚ùóSudo –ø–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥–µ–Ω")
            return

        self.status_var.set("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...")
        self.sudo_entry.config(state='disabled')

        thread = threading.Thread(target=self._verify_sudo_thread, args=(password,))
        thread.daemon = True
        thread.start()

    def _verify_sudo_thread(self, password):
        try:
            process = subprocess.Popen(
                ['sudo', '-S', 'echo', 'success'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            output, error = process.communicate(input=password + '\n')

            if process.returncode == 0:
                self.sudo_password = password
                self.auth_success = True
                self.root.after(0, self._sudo_verified_success)
            else:
                self.root.after(0, lambda: self._sudo_verified_fail("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"))

        except Exception as e:
            self.root.after(0, lambda: self._sudo_verified_fail(f"–û—à–∏–±–∫–∞: {str(e)}"))

    def _sudo_verified_success(self):
        self.status_var.set("‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        self.root.after(1000, self.close_and_proceed)

    def _sudo_verified_fail(self, error_msg):
        self.status_var.set(error_msg)
        self.sudo_entry.config(state='normal')
        self.sudo_entry.delete(0, tk.END)
        self.sudo_entry.focus()

    def close_and_proceed(self):
        self.root.destroy()

    def cancel(self):
        self.sudo_password = None
        self.auth_success = False
        self.root.destroy()

    def run(self):
        self.root.mainloop()
        return self.sudo_password, self.auth_success

class AuthWindow:
    """–û–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    def __init__(self):
        self.root = tk.Tk()
        self.setup_window_properties()
        self.root.title("AdGuard VPN - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ ---
        def is_steamdeck():
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Steam Deck –∏–ª–∏ SteamOS"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º /etc/os-release
                if os.path.exists("/etc/os-release"):
                    with open("/etc/os-release") as f:
                        os_info = f.read().lower()
                        if "steamos" in os_info or "steam deck" in os_info:
                            return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∏–º–µ–Ω–∏ (fallback)
                sys_name = platform.uname().machine.lower()
                if "steam" in sys_name or "deck" in sys_name:
                    return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º compositor (—á–∞—Å—Ç–æ Gamescope)
                result = subprocess.run(
                    ["ps", "-A"], capture_output=True, text=True
                )
                if "gamescope" in result.stdout.lower():
                    return True
            except:
                pass
            return False

        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ ---
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        # –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)
        base_width = 425
        base_height = 320

        # --- –£—á—ë—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ ---
        if screen_height > screen_width:
            # –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É Steam Deck)
            screen_width, screen_height = screen_height, screen_width

        # --- –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ Steam Deck / SteamOS ---
        if is_steamdeck():
            # –ù–∞ Steam Deck ‚Äî —á—É—Ç—å –º–µ–Ω—å—à–µ, —á—Ç–æ–±—ã –≤–ª–µ–∑–∞–ª–æ –≤ —ç–∫—Ä–∞–Ω –¥–∞–∂–µ —Å —Ä–∞–º–∫–æ–π
            width = min(base_width + 20, screen_width + 20)
            height = min(base_height + 40, screen_height + 40)
            # –ë–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–Ω–∞—á–µ Wayland –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é)
            self.root.geometry(f"{int(width)}x{int(height)}")
        else:
            # –ù–∞ –æ–±—ã—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö (CachyOS, Windows, etc.)
            width = base_width
            height = base_height
            self.root.geometry(f"{width}x{height}")

        self.root.configure(bg='#182030')

        try:
            from tkinter import ttk
            style = ttk.Style()
            style.theme_use('clam')
        except:
            pass

        self.auth_success = False
        self.auth_url = None
        self.monitoring = False
        self.current_countdown = 20
        self.check_count = 0
        self.countdown_running = False
        self.setup_ui()

    def setup_window_properties(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –æ–∫–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.root.title("AdGuard VPN Manager")

        try:
            self.root.wm_class("AdGuardVPNManager")
        except:
            pass

        try:
            manager_dir = os.path.expanduser("~/AdGuard VPN Manager")
            icon_path = os.path.join(manager_dir, "ico/adguard.png")
            if os.path.exists(icon_path):
                icon = tk.PhotoImage(file=icon_path)
                self.root.iconphoto(True, icon)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

    def setup_ui(self):
        main_frame = tk.Frame(self.root, bg='#182030', padx=20, pady=15)
        main_frame.pack(fill=tk.BOTH, expand=True)

        title_label = tk.Label(main_frame, text="AdGuard VPN - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                              font=("Arial", 16, "bold"), fg='white', bg='#182030')
        title_label.pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è —Å—Å—ã–ª–∫–∏
        self.url_frame = tk.Frame(main_frame, bg='#182030')
        self.url_frame.pack(fill=tk.X, pady=10)

        self.url_label = tk.Label(self.url_frame, text="", font=("Arial", 9),
                                 wraplength=400, justify=tk.LEFT,
                                 fg='#0a84ff', bg='#182030', cursor="hand2")
        self.url_label.pack(pady=5)

        # –§—Ä–µ–π–º –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        instructions_frame = tk.Frame(main_frame, bg='#182030')
        instructions_frame.pack(fill=tk.X, pady=10)

        instructions_text = (
            "1. –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —Å–∞–π—Ç–µ\n"
            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            "4. –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å'"
        )
        tk.Label(instructions_frame, text=instructions_text, font=("Arial", 9),
                fg='white', bg='#182030', justify=tk.LEFT).pack(anchor=tk.W)

        # –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        btn_frame = tk.Frame(main_frame, bg='#182030')
        btn_frame.pack(pady=10)

        button_style = {
            'font': ('Arial', 10),
            'bg': '#15354D',
            'fg': 'white',
            'bd': 0,
            'padx': 10,
            'pady': 5,
            'width': 20,
            'highlightthickness':0,
            'cursor': 'hand2'
        }

        self.browser_btn = create_hover_button(btn_frame, text="–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
                                    command=self.open_auth_browser, **button_style)
        self.browser_btn.grid(row=0, column=0, padx=(0, 10))

        exit_btn = create_hover_button(btn_frame, text="–í—ã—Ö–æ–¥",
                                       command=self.close_app, **button_style)
        exit_btn.grid(row=0, column=1)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        btn_frame.grid_columnconfigure(0, weight=1)
        btn_frame.grid_columnconfigure(1, weight=1)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_now_btn = create_hover_button(main_frame, text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", command=self.force_check_auth, ** button_style)
        self.check_now_btn.pack(pady=5)
        self.check_now_btn.config(state='disabled')  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏")
        status_bar = tk.Label(main_frame, textvariable=self.status_var,
                             relief=tk.SUNKEN, anchor=tk.W, bg='#15354D', fg='white')
        status_bar.pack(fill=tk.X, side=tk.BOTTOM, pady=(10, 0))

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
        self.browser_btn.config(state='disabled')

    def close_app(self):
        self.monitoring = False
        sys.exit()

    def get_auth_url(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã adguardvpn-cli login"""
        try:
            self.status_var.set("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

            process = subprocess.Popen(
                ['adguardvpn-cli', 'login'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )

            time.sleep(2)

            auth_url = None
            output_text = ""

            while True:
                line = process.stdout.readline()
                if not line and process.poll() is not None:
                    break
                if line:
                    output_text += line
                    url_match = re.search(r'https://[^\s]+', line)
                    if url_match:
                        auth_url = url_match.group(0)
                        break

            if not auth_url:
                error_output = process.stderr.read()
                url_match = re.search(r'https://[^\s]+', error_output)
                if url_match:
                    auth_url = url_match.group(0)

            if auth_url:
                self.auth_url = auth_url
                return auth_url
            else:
                return None

        except Exception as e:
            return None

    def open_auth_browser(self):
        if not self.auth_url:
            return

        self.status_var.set("–û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
        webbrowser.open(self.auth_url)

        self.status_var.set("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        self.browser_btn.config(state='disabled')
        self.check_now_btn.config(state='normal')  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.monitoring = True
        thread = threading.Thread(target=self._monitor_auth_status)
        thread.daemon = True
        thread.start()

    def force_check_auth(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.monitoring:
            return

        self.status_var.set("‚è© –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        self.check_now_btn.config(state='disabled')  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É

        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        self.countdown_running = False

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._perform_auth_check)
        thread.daemon = True
        thread.start()

    def _perform_auth_check(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'list-locations'],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                self.auth_success = True
                self.root.after(0, self._auth_success)
            else:
                self.root.after(0, self._check_failed)

        except Exception as e:
            self.root.after(0, lambda: self._check_failed(f"–û—à–∏–±–∫–∞: {str(e)}"))

    def _check_failed(self, error_msg=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if error_msg:
            self.status_var.set(f"‚ùå {error_msg}")
        else:
            self.status_var.set("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É —Ü–∏–∫–ª—É
        self.root.after(3000, self._resume_normal_check)

    def _resume_normal_check(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if self.monitoring:
            self.status_var.set("–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            self.check_now_btn.config(state='normal')
            # –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ

    def copy_auth_url(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        if self.auth_url:
            self.root.clipboard_clear()
            self.root.clipboard_append(self.auth_url)
            self.status_var.set("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")

    def start_auth_process(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        thread = threading.Thread(target=self._start_auth_thread)
        thread.daemon = True
        thread.start()

    def _start_auth_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        auth_url = self.get_auth_url()

        if auth_url:
            self.root.after(0, lambda: self._show_auth_url(auth_url))
        else:
            self.root.after(0, lambda: self._auth_fail("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"))

    def _show_auth_url(self, auth_url):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        display_url = auth_url
        if len(display_url) > 60:
            display_url = display_url[:60] + "..."

        self.url_label.config(text=display_url)
        self.status_var.set("‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ'")

        self.browser_btn.config(state='normal')

    def _monitor_auth_status(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ü–∏–∫–ª–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥"""
        self.check_count = 0

        while self.monitoring:
            try:
                self.check_count += 1
                self.countdown_running = True

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç 20 —Å–µ–∫—É–Ω–¥
                for countdown in range(20, 0, -1):
                    if not self.monitoring:
                        return
                    if not self.countdown_running:
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç—Å—á–µ—Ç –µ—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

                    self.current_countdown = countdown
                    self.root.after(0, lambda c=countdown: self.status_var.set(
                        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑: {c} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ #{self.check_count})"
                    ))
                    time.sleep(1)

                # –ï—Å–ª–∏ –æ—Ç—Å—á–µ—Ç –Ω–µ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                if self.countdown_running:
                    self._perform_auth_check()

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                self.countdown_running = True

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                time.sleep(1)

            except Exception as e:
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                self.root.after(0, lambda: self.status_var.set(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 20 —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ #{self.check_count})"
                ))
                self.countdown_running = True
                continue

    def _auth_success(self):
        """–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        self.monitoring = False
        self.countdown_running = False
        self.status_var.set("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        self.auth_success = True
        self.check_now_btn.config(state='disabled')
        self.root.after(2000, self.root.destroy)

    def _auth_fail(self, error_msg):
        self.browser_btn.config(state='normal')
        self.check_now_btn.config(state='disabled')
        self.status_var.set("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    def show_custom_question(self, title, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å Yes/No"""
        from ui.components.dialogs import show_question_dialog
        return show_question_dialog(self.root, title, message)

    def run(self):
        self.start_auth_process()
        self.root.mainloop()
        return self.auth_success

class ManagerAuthWindow:
    """–û–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä"""
    def __init__(self, parent):
        self.parent = parent
        self.root = tk.Toplevel(parent)
        self.setup_window_properties()
        self.root.title("AdGuard VPN - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ ---
        def is_steamdeck():
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Steam Deck –∏–ª–∏ SteamOS"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º /etc/os-release
                if os.path.exists("/etc/os-release"):
                    with open("/etc/os-release") as f:
                        os_info = f.read().lower()
                        if "steamos" in os_info or "steam deck" in os_info:
                            return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∏–º–µ–Ω–∏ (fallback)
                sys_name = platform.uname().machine.lower()
                if "steam" in sys_name or "deck" in sys_name:
                    return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º compositor (—á–∞—Å—Ç–æ Gamescope)
                result = subprocess.run(
                    ["ps", "-A"], capture_output=True, text=True
                )
                if "gamescope" in result.stdout.lower():
                    return True
            except:
                pass
            return False

        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ ---
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        # –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)
        base_width = 425
        base_height = 320

        # --- –£—á—ë—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ ---
        if screen_height > screen_width:
            # –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É Steam Deck)
            screen_width, screen_height = screen_height, screen_width

        # --- –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ Steam Deck / SteamOS ---
        if is_steamdeck():
            # –ù–∞ Steam Deck ‚Äî —á—É—Ç—å –º–µ–Ω—å—à–µ, —á—Ç–æ–±—ã –≤–ª–µ–∑–∞–ª–æ –≤ —ç–∫—Ä–∞–Ω –¥–∞–∂–µ —Å —Ä–∞–º–∫–æ–π
            width = min(base_width + 20, screen_width + 20)
            height = min(base_height + 40, screen_height + 40)
            # –ë–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–Ω–∞—á–µ Wayland –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é)
            self.root.geometry(f"{int(width)}x{int(height)}")
        else:
            # –ù–∞ –æ–±—ã—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö (CachyOS, Windows, etc.)
            width = base_width
            height = base_height
            self.root.geometry(f"{width}x{height}")

        self.root.configure(bg='#182030')

        # –Ø–≤–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
        self.root.transient(parent)  # –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º
        self.root.grab_set()         # –î–µ–ª–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–º

        try:
            from tkinter import ttk
            style = ttk.Style()
            style.theme_use('clam')
        except:
            pass

        self.auth_success = False
        self.auth_url = None
        self.monitoring = False
        self.current_countdown = 20
        self.check_count = 0
        self.countdown_running = False
        self.setup_ui()

    def setup_window_properties(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –æ–∫–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.root.title("AdGuard VPN Manager")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WM_CLASS (–ë–ï–ó –ü–†–û–ë–ï–õ–û–í!)
        try:
            self.root.wm_class("AdGuardVPNManager")
        except:
            pass

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
        try:
            manager_dir = os.path.expanduser("~/AdGuard VPN Manager")
            icon_path = os.path.join(manager_dir, "ico/adguard.png")
            if os.path.exists(icon_path):
                # –î–ª—è PNG —Ñ–∞–π–ª–æ–≤ –≤ tkinter
                icon = tk.PhotoImage(file=icon_path)
                self.root.iconphoto(True, icon)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

    def setup_ui(self):
        main_frame = tk.Frame(self.root, bg='#182030', padx=20, pady=15)
        main_frame.pack(fill=tk.BOTH, expand=True)

        title_label = tk.Label(main_frame, text="AdGuard VPN - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                              font=("Arial", 16, "bold"), fg='white', bg='#182030')
        title_label.pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è —Å—Å—ã–ª–∫–∏
        self.url_frame = tk.Frame(main_frame, bg='#182030')
        self.url_frame.pack(fill=tk.X, pady=10)

        self.url_label = tk.Label(self.url_frame, text="", font=("Arial", 9),
                                 wraplength=400, justify=tk.LEFT,
                                 fg='#0a84ff', bg='#182030', cursor="hand2")
        self.url_label.pack(pady=5)

        # –§—Ä–µ–π–º –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        instructions_frame = tk.Frame(main_frame, bg='#182030')
        instructions_frame.pack(fill=tk.X, pady=10)

        instructions_text = (
            "1. –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —Å–∞–π—Ç–µ\n"
            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            "4. –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å'"
        )
        tk.Label(instructions_frame, text=instructions_text, font=("Arial", 9),
                fg='white', bg='#182030', justify=tk.LEFT).pack(anchor=tk.W)

        # –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        btn_frame = tk.Frame(main_frame, bg='#182030')
        btn_frame.pack(pady=10)

        button_style = {
            'font': ('Arial', 10),
            'bg': '#15354D',
            'fg': 'white',
            'bd': 0,
            'padx': 10,
            'pady': 5,
            'width': 20,
            'highlightthickness':0,
            'cursor': 'hand2'
        }

        self.browser_btn = create_hover_button(btn_frame, text="–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
                                    command=self.open_auth_browser, **button_style)
        self.browser_btn.grid(row=0, column=0, padx=(0, 10))

        self.cancel_btn = create_hover_button(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                                              command=self.cancel, **button_style)
        self.cancel_btn.grid(row=0, column=1)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        btn_frame.grid_columnconfigure(0, weight=1)
        btn_frame.grid_columnconfigure(1, weight=1)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_now_btn = create_hover_button(main_frame, text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", command=self.force_check_auth, ** button_style)
        self.check_now_btn.pack(pady=5)
        self.check_now_btn.config(state='disabled')

        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        status_bar = tk.Label(main_frame, textvariable=self.status_var,
                             relief=tk.SUNKEN, anchor=tk.W, bg='#15354D', fg='white')
        status_bar.pack(fill=tk.X, side=tk.BOTTOM, pady=(10, 0))

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
        self.browser_btn.config(state='disabled')

    def cancel(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.monitoring = False
        self.countdown_running = False
        self.auth_success = False
        self.root.destroy()

    def get_auth_url(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã adguardvpn-cli login"""
        try:
            self.status_var.set("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

            process = subprocess.Popen(
                ['adguardvpn-cli', 'login'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )

            time.sleep(2)

            auth_url = None
            output_text = ""

            while True:
                line = process.stdout.readline()
                if not line and process.poll() is not None:
                    break
                if line:
                    output_text += line
                    url_match = re.search(r'https://[^\s]+', line)
                    if url_match:
                        auth_url = url_match.group(0)
                        break

            if not auth_url:
                error_output = process.stderr.read()
                url_match = re.search(r'https://[^\s]+', error_output)
                if url_match:
                    auth_url = url_match.group(0)

            if auth_url:
                self.auth_url = auth_url
                return auth_url
            else:
                return None

        except Exception as e:
            return None

    def open_auth_browser(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞"""
        if not self.auth_url:
            return

        self.status_var.set("–û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
        webbrowser.open(self.auth_url)

        self.status_var.set("–û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        self.browser_btn.config(state='disabled')
        self.cancel_btn.config(state='disabled')
        self.check_now_btn.config(state='normal')  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.monitoring = True
        thread = threading.Thread(target=self._monitor_auth_status)
        thread.daemon = True
        thread.start()

    def force_check_auth(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.monitoring:
            return

        self.status_var.set("‚è© –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        self.check_now_btn.config(state='disabled')  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É

        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        self.countdown_running = False

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._perform_auth_check)
        thread.daemon = True
        thread.start()

    def _perform_auth_check(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            result = subprocess.run(
                ['adguardvpn-cli', 'list-locations'],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                self.auth_success = True
                self.root.after(0, self._auth_success)
            else:
                self.root.after(0, self._check_failed)

        except Exception as e:
            self.root.after(0, lambda: self._check_failed(f"–û—à–∏–±–∫–∞: {str(e)}"))

    def _check_failed(self, error_msg=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if error_msg:
            self.status_var.set(f"‚ùå {error_msg}")
        else:
            self.status_var.set("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É —Ü–∏–∫–ª—É
        self.root.after(3000, self._resume_normal_check)

    def _resume_normal_check(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if self.monitoring:
            self.status_var.set("–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            self.check_now_btn.config(state='normal')
            # –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ

    def _monitor_auth_status(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ü–∏–∫–ª–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥"""
        self.check_count = 0

        while self.monitoring:
            try:
                self.check_count += 1
                self.countdown_running = True

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç 20 —Å–µ–∫—É–Ω–¥
                for countdown in range(20, 0, -1):
                    if not self.monitoring:
                        return
                    if not self.countdown_running:
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç—Å—á–µ—Ç –µ—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

                    self.current_countdown = countdown
                    self.root.after(0, lambda c=countdown: self.status_var.set(
                        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑: {c} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ #{self.check_count})"
                    ))
                    time.sleep(1)

                # –ï—Å–ª–∏ –æ—Ç—Å—á–µ—Ç –Ω–µ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                if self.countdown_running:
                    self._perform_auth_check()

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                self.countdown_running = True

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                time.sleep(1)

            except Exception as e:
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                self.root.after(0, lambda: self.status_var.set(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 20 —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ #{self.check_count})"
                ))
                self.countdown_running = True
                continue

    def _auth_success(self):
        """–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        self.monitoring = False
        self.countdown_running = False
        self.status_var.set("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        self.auth_success = True
        self.check_now_btn.config(state='disabled')
        self.root.after(2000, self.root.destroy)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã

    def _auth_fail(self, error_msg):
        self.browser_btn.config(state='normal')
        self.cancel_btn.config(state='normal')
        self.check_now_btn.config(state='disabled')
        self.status_var.set("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    def start_auth_process(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        thread = threading.Thread(target=self._start_auth_thread)
        thread.daemon = True
        thread.start()

    def _start_auth_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        auth_url = self.get_auth_url()

        if auth_url:
            self.root.after(0, lambda: self._show_auth_url(auth_url))
        else:
            self.root.after(0, lambda: self._auth_fail("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"))

    def _show_auth_url(self, auth_url):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        display_url = auth_url
        if len(display_url) > 60:
            display_url = display_url[:60] + "..."

        self.url_label.config(text=display_url)
        self.status_var.set("‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ'")

        self.browser_btn.config(state='normal')

    def run(self):
        self.start_auth_process()
        self.root.wait_window()  # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        return self.auth_success
