import tkinter as tk
from tkinter import ttk, scrolledtext
import subprocess
import threading
import os
import sys
import shutil
from ui.components.button_styler import create_hover_button, apply_hover_effect

class SudoPasswordWindow:
    def __init__(self, parent):
        self.parent = parent
        self.root = tk.Toplevel(parent)
        self.setup_window_properties()
        self.root.title("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        self.root.geometry("270x280")
        self.root.configure(bg='#182030')
        self.root.transient(parent)
        self.root.grab_set()

        try:
            from tkinter import ttk
            style = ttk.Style()
            style.theme_use('clam')  # –∏–ª–∏ 'alt', 'classic' - –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–º—ã
        except:
            pass

        self.sudo_password = None
        self.setup_ui()

    def setup_window_properties(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –æ–∫–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.root.title("AdGuard VPN Manager")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WM_CLASS (–ë–ï–ó –ü–†–û–ë–ï–õ–û–í!)
        try:
            self.root.wm_class("AdGuardVPNManager")
        except:
            pass

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
        try:
            manager_dir = os.path.expanduser("~/AdGuard VPN Manager")
            icon_path = os.path.join(manager_dir, "ico/adguard.png")
            if os.path.exists(icon_path):
                # –î–ª—è PNG —Ñ–∞–π–ª–æ–≤ –≤ tkinter
                icon = tk.PhotoImage(file=icon_path)
                self.root.iconphoto(True, icon)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

    def setup_ui(self):
        main_frame = tk.Frame(self.root, bg='#182030', padx=20, pady=15)
        main_frame.pack(fill=tk.BOTH, expand=True)

        title_label = tk.Label(main_frame, text="–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                              font=("Arial", 14, "bold"), fg='white', bg='#182030')
        title_label.pack(pady=5)

        desc_label = tk.Label(main_frame,
                             text="–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è AdGuard VPN\n—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                             font=("Arial", 10), fg='white', bg='#182030')
        desc_label.pack(pady=5)

        sudo_frame = tk.Frame(main_frame, bg='#182030')
        sudo_frame.pack(fill=tk.X, pady=10)

        tk.Label(sudo_frame, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                fg='white', bg='#182030').pack(anchor=tk.W)

        self.sudo_entry = tk.Entry(sudo_frame, show="*", width=30, font=('Arial', 12),
                                  bg='#15354D', fg='white', insertbackground='white')
        self.sudo_entry.pack(fill=tk.X, pady=5)
        self.sudo_entry.bind('<Return>', self.verify_sudo)
        self.sudo_entry.focus()

        btn_frame = tk.Frame(main_frame, bg='#182030')
        btn_frame.pack(fill=tk.X, pady=5)

        button_style = {
            'font': ('Arial', 10),
            'bg': '#15354D',
            'fg': 'white',
            'bd': 0,
            'padx': 10,
            'pady': 5,
            'width': 15,
            'highlightthickness':0,
            'cursor': 'hand2'
        }

        resume_btn = create_hover_button(btn_frame, text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                                         command=self.verify_sudo, **button_style)
        resume_btn.grid(row=0, column=0, padx=(0, 10))

        cancel_btn = create_hover_button(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                                         command=self.cancel, **button_style)
        cancel_btn.grid(row=0, column=1)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–µ—Å—å —Ñ—Ä–µ–π–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        btn_frame.grid_columnconfigure(0, weight=1)
        btn_frame.grid_columnconfigure(1, weight=1)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        status_bar = tk.Label(main_frame, textvariable=self.status_var,
                             relief=tk.SUNKEN, anchor=tk.W, bg='#15354D', fg='white')
        status_bar.pack(fill=tk.X, side=tk.BOTTOM, pady=(10, 0))

    def verify_sudo(self, event=None):
        password = self.sudo_entry.get()
        if not password:
            self.status_var.set("‚ùóSudo –ø–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥–µ–Ω")
            return

        self.status_var.set("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...")
        self.sudo_entry.config(state='disabled')

        thread = threading.Thread(target=self._verify_sudo_thread, args=(password,))
        thread.daemon = True
        thread.start()

    def _verify_sudo_thread(self, password):
        try:
            process = subprocess.Popen(
                ['sudo', '-S', 'echo', 'success'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            output, error = process.communicate(input=password + '\n')

            if process.returncode == 0:
                self.sudo_password = password
                self.auth_success = True
                self.root.after(0, self._sudo_verified_success)
            else:
                self.root.after(0, lambda: self._sudo_verified_fail("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"))

        except Exception as e:
            self.root.after(0, lambda: self._sudo_verified_fail(f"–û—à–∏–±–∫–∞: {str(e)}"))

    def _sudo_verified_success(self):
        self.status_var.set("‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        self.root.after(500, self.close_window)

    def _sudo_verified_fail(self, error_msg):
        self.status_var.set(error_msg)
        self.sudo_entry.config(state='normal')
        self.sudo_entry.delete(0, tk.END)
        self.sudo_entry.focus()

    def close_window(self):
        self.root.destroy()

    def cancel(self):
        self.sudo_password = None
        self.root.destroy()

    def run(self):
        self.root.wait_window()
        return self.sudo_password


class UninstallWindow:
    def __init__(self, parent):
        self.parent = parent
        self.root = tk.Toplevel(parent)
        self.setup_window_properties()
        self.root.title("–£–¥–∞–ª–µ–Ω–∏–µ AdGuard VPN")
        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ ---
        def is_steamdeck():
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Steam Deck –∏–ª–∏ SteamOS"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º /etc/os-release
                if os.path.exists("/etc/os-release"):
                    with open("/etc/os-release") as f:
                        os_info = f.read().lower()
                        if "steamos" in os_info or "steam deck" in os_info:
                            return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∏–º–µ–Ω–∏ (fallback)
                sys_name = platform.uname().machine.lower()
                if "steam" in sys_name or "deck" in sys_name:
                    return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º compositor (—á–∞—Å—Ç–æ Gamescope)
                result = subprocess.run(
                    ["ps", "-A"], capture_output=True, text=True
                )
                if "gamescope" in result.stdout.lower():
                    return True
            except:
                pass
            return False

        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ ---
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        # –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª)
        base_width = 335
        base_height = 460

        # --- –£—á—ë—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ ---
        if screen_height > screen_width:
            # –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É Steam Deck)
            screen_width, screen_height = screen_height, screen_width

        # --- –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ Steam Deck / SteamOS ---
        if is_steamdeck():
            # –ù–∞ Steam Deck ‚Äî —á—É—Ç—å –º–µ–Ω—å—à–µ, —á—Ç–æ–±—ã –≤–ª–µ–∑–∞–ª–æ –≤ —ç–∫—Ä–∞–Ω –¥–∞–∂–µ —Å —Ä–∞–º–∫–æ–π
            width = min(base_width + 20, screen_width + 20)
            height = min(base_height + 10, screen_height + 40)
            # –ë–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–Ω–∞—á–µ Wayland –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é)
            self.root.geometry(f"{int(width)}x{int(height)}")
        else:
            # –ù–∞ –æ–±—ã—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö (CachyOS, Windows, etc.)
            width = base_width
            height = base_height
            self.root.geometry(f"{width}x{height}")
        self.root.configure(bg='#182030')
        self.root.transient(parent)
        self.root.grab_set()

        try:
            from tkinter import ttk
            style = ttk.Style()
            style.theme_use('clam')
        except:
            pass

        self.sudo_password = None
        self.filesystem_unlocked = False

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        self.remove_vpn_var = tk.BooleanVar(value=True)
        self.remove_manager_var = tk.BooleanVar(value=True)
        self.remove_config_var = tk.BooleanVar(value=False)

        self.setup_ui()

    def setup_window_properties(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –æ–∫–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.root.title("AdGuard VPN Manager")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WM_CLASS (–ë–ï–ó –ü–†–û–ë–ï–õ–û–í!)
        try:
            self.root.wm_class("AdGuardVPNManager")
        except:
            pass

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
        try:
            manager_dir = os.path.expanduser("~/AdGuard VPN Manager")
            icon_path = os.path.join(manager_dir, "ico/adguard.png")
            if os.path.exists(icon_path):
                # –î–ª—è PNG —Ñ–∞–π–ª–æ–≤ –≤ tkinter
                icon = tk.PhotoImage(file=icon_path)
                self.root.iconphoto(True, icon)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

    def setup_ui(self):
        main_frame = tk.Frame(self.root, bg='#182030', padx=20, pady=15)
        main_frame.pack(fill=tk.BOTH, expand=True)

        title_label = tk.Label(main_frame, text="–£–¥–∞–ª–µ–Ω–∏–µ AdGuard VPN",
                              font=("Arial", 16, "bold"), fg='white', bg='#182030')
        title_label.pack(pady=10)

        warning_label = tk.Label(main_frame,
                                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                font=("Arial", 12), fg='#ff3b30', bg='#182030')
        warning_label.pack(pady=5)

        # –§—Ä–µ–π–º –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        checkboxes_frame = tk.Frame(main_frame, bg='#182030')
        checkboxes_frame.pack(fill=tk.X, pady=10)

        # –°—Ç–∏–ª—å –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        checkbox_style = {
            'font': ('Arial', 10),
            'fg': 'white',
            'bg': '#182030',
            'selectcolor': '#15354D',
            'activebackground': '#182030',
            'activeforeground': 'white',
            'bd': 0,
            'highlightthickness': 0
        }

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è AdGuard VPN
        self.vpn_checkbox = tk.Checkbutton(
            checkboxes_frame,
            text="AdGuard VPN",
            variable=self.remove_vpn_var,
            **checkbox_style
        )
        self.vpn_checkbox.pack(anchor=tk.W, pady=5)

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        self.manager_checkbox = tk.Checkbutton(
            checkboxes_frame,
            text="–ú–µ–Ω–µ–¥–∂–µ—Ä AdGuard VPN",
            variable=self.remove_manager_var,
            **checkbox_style
        )
        self.manager_checkbox.pack(anchor=tk.W, pady=5)

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
        self.config_checkbox = tk.Checkbutton(
            checkboxes_frame,
            text="–§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            variable=self.remove_config_var,
            **checkbox_style
        )
        self.config_checkbox.pack(anchor=tk.W, pady=5)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        info_label = tk.Label(main_frame,
                             text="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
                             font=("Arial", 10), fg='white', bg='#182030')
        info_label.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(main_frame, bg='#182030')
        btn_frame.pack(fill=tk.X, pady=10)

        button_style = {
            'font': ('Arial', 10),
            'bg': '#15354D',
            'fg': 'white',
            'bd': 0,
            'padx': 10,
            'pady': 5,
            'width': 15,
            'highlightthickness':0,
            'cursor': 'hand2'
        }

        self.uninstall_btn = create_hover_button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å",
                                                 command=self.uninstall, **button_style)
        self.uninstall_btn.grid(row=0, column=0, padx=(0, 10))

        self.cancel_btn = create_hover_button(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                                              command=self.close_window, **button_style)
        self.cancel_btn.grid(row=0, column=1)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–µ—Å—å —Ñ—Ä–µ–π–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        btn_frame.grid_columnconfigure(0, weight=1)
        btn_frame.grid_columnconfigure(1, weight=1)

        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞)
        log_frame = tk.Frame(main_frame, bg='#182030')
        log_frame.pack(fill=tk.BOTH, expand=True, pady=10)

        self.log_text = tk.Text(log_frame, height=8, width=40, highlightthickness=0,
                                                 wrap=tk.WORD, bg='#15354D', fg='white',
                                                 font=("Courier", 9))
        self.log_text.pack(fill=tk.BOTH, expand=True, pady=(5, 0))

    def log_message(self, message):
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update()

    def get_sudo_password(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç sudo –ø–∞—Ä–æ–ª—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        self.log_message("üîê –ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        sudo_window = SudoPasswordWindow(self.root)
        password = sudo_window.run()

        if password:
            self.log_message("‚úÖ Sudo –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return password
        else:
            self.log_message("–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω")
            return None

    def unlock_filesystem(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã SteamOS"""
        try:
            self.log_message("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã SteamOS...")
            cmd = f'echo "{self.sudo_password}" | sudo -S steamos-readonly disable'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)

            if result.returncode == 0:
                self.filesystem_unlocked = True
                self.log_message("‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
                return True
            else:
                self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {result.stderr}")
                return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")
            return True

    def lock_filesystem(self):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã SteamOS"""
        if not self.filesystem_unlocked:
            return

        try:
            self.log_message("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã SteamOS...")
            cmd = f'echo "{self.sudo_password}" | sudo -S steamos-readonly enable'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)

            if result.returncode == 0:
                self.log_message("‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
                self.log_message("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {result.stderr}")
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")

    def uninstall(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        if not any([self.remove_vpn_var.get(), self.remove_config_var.get(), self.remove_manager_var.get()]):
            self.log_message("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        self.sudo_password = self.get_sudo_password()
        if not self.sudo_password:
            return

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.uninstall_btn.config(state='disabled')
        self.cancel_btn.config(state='disabled')

        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._uninstall_thread)
        thread.daemon = True
        thread.start()

    def _uninstall_thread(self):
        """–ü–æ—Ç–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            self.root.after(0, lambda: self.log_message("=== –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ==="))

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            selected_components = []
            if self.remove_vpn_var.get():
                selected_components.append("AdGuard VPN")
            if self.remove_config_var.get():
                selected_components.append("–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
            if self.remove_manager_var.get():
                selected_components.append("–º–µ–Ω–µ–¥–∂–µ—Ä")

            self.root.after(0, lambda: self.log_message(f"üìù –í—ã–±—Ä–∞–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {', '.join(selected_components)}"))

            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å VPN)
            if self.remove_vpn_var.get():
                if not self.unlock_filesystem():
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
            success = self.perform_uninstall()

            if success:
                self.root.after(0, self._uninstall_success)
            else:
                self.root.after(0, lambda: self._uninstall_fail("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"))

        except Exception as e:
            self.root.after(0, lambda: self._uninstall_fail(f"–û—à–∏–±–∫–∞: {str(e)}"))
        finally:
            # –í—Å–µ–≥–¥–∞ –±–ª–æ–∫–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)
            if self.filesystem_unlocked:
                self.lock_filesystem()

    def perform_uninstall(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ AdGuard VPN
            if self.remove_vpn_var.get():
                # 1. –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
                self.root.after(0, lambda: self.log_message("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏..."))
                link_cmd = f'echo "{self.sudo_password}" | sudo -S rm -f /usr/local/bin/adguardvpn-cli'
                result = subprocess.run(link_cmd, shell=True, capture_output=True, text=True)

                if result.returncode == 0:
                    self.root.after(0, lambda: self.log_message("‚úÖ –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞"))
                else:
                    self.root.after(0, lambda: self.log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É"))

                # 2. –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                self.root.after(0, lambda: self.log_message("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ AdGuard VPN..."))
                install_dir = "/opt/adguardvpn_cli"
                rm_cmd = f'echo "{self.sudo_password}" | sudo -S rm -rf {install_dir}'
                result = subprocess.run(rm_cmd, shell=True, capture_output=True, text=True)

                if result.returncode == 0:
                    self.root.after(0, lambda: self.log_message("‚úÖ –§–∞–π–ª—ã AdGuard VPN —É–¥–∞–ª–µ–Ω—ã"))
                else:
                    self.root.after(0, lambda: self.log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã AdGuard VPN"))

            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if self.remove_config_var.get():
                self.root.after(0, lambda: self.log_message("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."))

                # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                config_dir = os.path.expanduser("~/.local/share/adguardvpn-cli")
                rm_config_cmd = f'echo "{self.sudo_password}" | sudo -S rm -rf {config_dir}'
                result = subprocess.run(rm_config_cmd, shell=True, capture_output=True, text=True)

                if result.returncode == 0:
                    self.root.after(0, lambda: self.log_message("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"))
                else:
                    self.root.after(0, lambda: self.log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"))

            # –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —è—Ä–ª—ã–∫–æ–≤
            if self.remove_manager_var.get():
                self.root.after(0, lambda: self.log_message("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —è—Ä–ª—ã–∫–æ–≤..."))

                # –£–¥–∞–ª—è–µ–º —è—Ä–ª—ã–∫–∏ —Å —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
                self.root.after(0, lambda: self.log_message("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —è—Ä–ª—ã–∫–æ–≤ —Å —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞..."))
                desktop_paths = [
                    os.path.expanduser("~/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/AdGuard_VPN_Manager.desktop"),  # –†—É—Å—Å–∫–∏–π
                    os.path.expanduser("~/Desktop/AdGuard_VPN_Manager.desktop"),       # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
                ]

                desktop_removed = False
                for desktop_path in desktop_paths:
                    if os.path.exists(desktop_path):
                        try:
                            os.remove(desktop_path)
                            self.root.after(0, lambda: self.log_message(f"‚úÖ –Ø—Ä–ª—ã–∫ —É–¥–∞–ª–µ–Ω: {desktop_path}"))
                            desktop_removed = True
                        except Exception as e:
                            self.root.after(0, lambda: self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —è—Ä–ª—ã–∫ {desktop_path}: {e}"))

                if not desktop_removed:
                    self.root.after(0, lambda: self.log_message("‚ÑπÔ∏è –Ø—Ä–ª—ã–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))

                # –£–¥–∞–ª—è–µ–º —è—Ä–ª—ã–∫ –∏–∑ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
                self.root.after(0, lambda: self.log_message("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —è—Ä–ª—ã–∫–∞ –∏–∑ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."))

                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
                    home_dir = os.path.expanduser("~")
                    applications_path = os.path.join(home_dir, ".local/share/applications/AdGuard_VPN_Manager.desktop")

                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
                    if os.path.exists(applications_path):
                        os.remove(applications_path)
                        self.root.after(0, lambda: self.log_message("‚úÖ –Ø—Ä–ª—ã–∫ –∏–∑ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω"))

                        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö desktop —Ñ–∞–π–ª–æ–≤
                        self.root.after(0, lambda: self.log_message("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."))
                        applications_dir = os.path.dirname(applications_path)
                        update_result = subprocess.run(['update-desktop-database', applications_dir],
                                                    capture_output=True, text=True)

                        if update_result.returncode == 0:
                            self.root.after(0, lambda: self.log_message("‚úÖ –ú–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ"))
                        else:
                            self.root.after(0, lambda: self.log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"))
                    else:
                        self.root.after(0, lambda: self.log_message("‚ÑπÔ∏è –Ø—Ä–ª—ã–∫ –≤ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"))

                except Exception as e:
                    self.root.after(0, lambda: self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —è—Ä–ª—ã–∫–∞: {str(e)}"))

                # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                self.root.after(0, lambda: self.log_message("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞..."))
                manager_dir = os.path.expanduser("~/AdGuard VPN Manager")
                if os.path.exists(manager_dir):
                    try:
                        shutil.rmtree(manager_dir)
                        self.root.after(0, lambda: self.log_message("‚úÖ –ü–∞–ø–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞"))
                    except Exception as e:
                        self.root.after(0, lambda: self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {str(e)}"))
                else:
                    self.root.after(0, lambda: self.log_message("‚ÑπÔ∏è –ü–∞–ø–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))

            return True


        except Exception as e:
            self.root.after(0, lambda: self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}"))
            return False

    def _uninstall_success(self):
        self.log_message("=== –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ ===")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä)
        if self.remove_manager_var.get():
            self.root.after(2000, lambda: [self.root.destroy(), self.parent.destroy()])
        else:
            # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
            self.uninstall_btn.config(state='normal')
            self.cancel_btn.config(state='normal')

    def _uninstall_fail(self, error_msg):
        self.log_message(f"‚ùå {error_msg}")

        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        self.uninstall_btn.config(state='normal')
        self.cancel_btn.config(state='normal')

    def close_window(self):
        self.root.destroy()

    def run(self):
        self.root.wait_window()
